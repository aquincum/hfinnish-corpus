?read.table
head(sublex.results)
c(1, 6:9)
)
head(sublex.results)
head(sublex.results)
head(sublex.results)
head(sublex.data)
names(sublex.data)
sublex.results$change
sublex.results$change
head(sublex.harmsum)
) <- )
sublex.avs
sublex.avs
main.constraint.weights
main.constraint.weights
names(main.constraint.weights)
main.constraint.weights
rm(list = ls())
sublex.avs
main.constraint.weights
sublex.avs
head(sublex.data)
main.constraint.weights
main.constraint.weights
sublex.avs
setwd("~/Dropbox/Experigen_Byun/R_files/")
 q <- Tasks.GetMainQualification()
q
GetQualificationType(q)
GetQualifications()
GetQualifications(q)
q2 <- Tasks.GetEligibleForTestQualification()
GetQualifications(q2)
nrow(GetQualifications(q2))
qgs <- GetQualifications(q2)$WorkerId
qgs
trips <- Tasks.IdentifyNHITs(1)
head(trips)
trips[!(trips$WorkerId %in% qgs),]
nrow(trips[!(trips$WorkerId %in% qgs),])
q()
n
contrasts(xp.marsh$pattern)
contrasts(xp.marsh$pattern)
?contrasts
contr.sum(6)
C
C(xp.marsh$pattern)
C(xp.marsh$pattern, sum)
C(xp.marsh$pattern)
contr.sum(6)
?contr.sum
contr.sum(6)
contr.sum(6, contrasts = FALSE)
contr.treatment(6, contrasts = FALSE)
contr.helmert(6, contrasts = FALSE)
contrasts(xp.marsh$pattern)
contrasts(xp.marsh$pattern) <- contr.sum(6, contrasts = T)
contrasts(xp.marsh$pattern)
contrasts(xp.marsh$pattern) <- contr.helmert(6, contrasts = T)
contrasts(xp.marsh$pattern)
contrasts(xp.marsh$pattern) <- contr.helmert(6, contrasts = F)
contrasts(xp.marsh$pattern)
contrasts(xp.marsh$pattern) <- contr.helmert(7, contrasts = F)
q()
n
head(xp.marsh)
head(xp.contr)
c
ftc <- read.table("~/Downloads/filestocheck.csv", sep=",", header=T)
ftc
n
getwd()
setwd("~/Dropbox/Experigen_Byun/R_files/")
Tasks.IdentifyNHITs(c(1,2,3)
)
Tasks.IdentifyNHITs(c(1,2,3))
n
fn <- "sublexical-output-uj2-test.txt"
install.packages("reshape")
n
fn <- "output_test-unigram.txt"
head(sublex.molten)
sublex.allvars
as.character(main.constraint.weights[3,])
as.character(main.constraint.weights[1,])
as.character(main.constraint.weights[2,])
as.character(main.constraint.weights[3,])
as.character(main.constraint.weights[4,])
as.character(main.constraint.weights[3,])
main.constraint.weights[3,]
str(main.constraint.weights[3,])
main.constraint.weights
main.constraint.weights
(
))
)
mcw.molten
)
mcw.molten
head(mcw.molten)
head(mcw.molten)
mcw.molten
head(mcw.molten$constraint)
head(mcw.molten)
mcw.molten2
warnings()
help(cast)
?ordered
mcw.molten2
mc.gkgp
?grep
?regmatches
constraints <- mc.weights$constraint
feature <- "front"
re
?nchar
re
re$match.length
re[1]
?substr
?switch
mc.weights
mc.weights[43]
mc.weights[43,]
mc.weights
mc.weights[mc.weights$front != "-" & mc.weights$rounded != "+" & mc.weights$high != "-",]
getVowel("+","-","+","-")
getVowel("+","-","+","-")
getVowel("+","-","-","-")
vowel.prefersback
plot(vowel.prefersback)
head(sublex.harmsum)
head(sublex.hsmolten)
head(sublex.wugtable)
sublex.wugtable["base"]
sublex.wugtable[1,"base"]
x <- "base"
sublex.wugtable[1,x]
sublex.wugtable[1,c(x)]
d <- sublex.wugtable
wordcolumn <- "base"
scorecolumn <- "prefersback"
ignorefirst2rows <- TRUE
ignorefirst2rows <- FALSE
d$phonemes
d[wordcolumn]
as.character(d[wordcolumn])
as.character(d[[wordcolumn]])
sublex.wugsumm
sublex.wugsumm
str(sublex.wugsumm)
getwd()
freqDisyllHarm
lexsumm
stemlexstats
lexfile
head(lexfile)
d$stem
d$stem
head(lexfile)
lexfile[1]$stem
lexfile[1,1]
head(lexfile)
head(lexfile)
lexfile
lexfile
summary(lexfile)
summary(lexfile)
2
